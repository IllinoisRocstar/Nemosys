#!/bin/tcsh
# Usage:
#
# run_automated_tests <project file> <mode> <rundir>
#
# where <project file> indicates the project file.
# The project file is processed line-by-line.  Each
# line is expected to have the following information
# and format:
#
# ProjectName:BranchName:BranchPath
#
# The "ProjectName" is the name of the project to
# be built/tested.  The "BranchName" is an arbitrary
# name to describe the branch, and "BranchPath" is the 
# actual path to the branch in the project base repository.
# 
# The utility automatically assumes the branch will 
# be checked out from:
# file:///Projects/IR/SourceRepository/<BranchPath>
#

# ===== Initialization and setup =========
set mode="$2"
set project_file="$1"
set rundir="$3"
set specific_test="$4"
set mydir=${rundir}
set HOSTNAME=`hostname -s`
cd ${mydir}
# Use a different shell or shell config if you want
#source ${HOME}/.tcshrc
# ========================================

# === Build/Test Environment Settings ====
setenv SVNCOMMAND `which svn`
setenv GITCOMMAND `which git`
setenv CTESTCOMMAND `which ctest`
setenv CMAKECOMMAND `which cmake`
# The following two lines are optional.  Rocpack requires this
# setting for CMAKE_PREFIX_PATH. Your project may require
# different paths, or a whole set of options - which can be
# set as the PROJECT_CONFIGURATION_OPTIONS environment variable.
#setenv CMAKE_PREFIX_PATH /Projects/Tomography_code/Support/ILROCSTAR2
setenv PROJECT_CONFIGURATION_OPTIONS

setenv MODULEPATHSAV $MODULEPATH
setenv MODULEPATH "${mydir}/modules:$MODULEPATH"
#
#  add a variable to enable building documentation
#  eventually read this from input
#
setenv BUILD_DOCUMENTATION "ON"
setenv PROJECT_CONFIGURATION_OPTIONS "-DBUILD_DOCUMENTATION=ON"

#
#  these options I would like to break into a project specific file
#
# options specific to IMPACT
#module load compilers/mpich-3.1.2.gnu
#setenv CMAKE_PREFIX_PATH "/Projects/IR/Software/Install/IRAD"
# options specific to IRAD
# ========================================

# == Loop over projects and invoke ctest =
foreach project (`cat ${project_file} | grep -v "#"`)
  set PROJECT_NAME=`printf "${project}" | cut -d "|" -f 1`
  set BRANCH_NAME=`printf "${project}" | cut -d "|" -f 2`
  set BRANCH_PATH=`printf "${project}" | cut -d "|" -f 3`
  if( ("${specific_test}" == "${PROJECT_NAME}") || ("${specific_test}" == "") ) then
    set REPO_TYPE=`printf "${project}" | cut -d "|" -f 4`
    setenv REPO_TYPE ${REPO_TYPE}
    setenv DOC_TARGET `printf "${project}" | cut -d "|" -f 5`

    printf "***************************************************\n"
    printf "Processing ${PROJECT_NAME} ${BRANCH_NAME}...\n"
    printf "***************************************************\n"
    setenv PROJECT_SOURCE "${mydir}/${PROJECT_NAME}_${BRANCH_NAME}"
    setenv PROJECT_ROOT ${BRANCH_PATH}
    setenv PROJECT_BUILD_DIRECTORY "${mydir}/${PROJECT_NAME}-${HOSTNAME}-${BRANCH_NAME}-${mode}"
    setenv BRANCH ${BRANCH_NAME}
    rm -f ${PROJECT_NAME}_${BRANCH_NAME}_${mode}_log.txt

    # load project specific environment module
    if (-e modules/${PROJECT_NAME}) then
      printf "Loading module ${PROJECT_NAME}\n"
      module load ${PROJECT_NAME}
    endif

    # look for the project in the documentation directory, this indicates we should
    # build the documentation
    if ( (-e documentation/${PROJECT_NAME}) && (${DOC_TARGET} != "none") ) then
      setenv PROJECT_CONFIGURATION_OPTIONS "-DBUILD_DOCUMENTATION=ON ${PROJECT_CONFIGURATION_OPTIONS}" 
      printf "Enabling documentation build for ${PROJECT_NAME} \n"
      setenv BUILD_DOCS TRUE
    endif

    printf "Running ctest for ${PROJECT_NAME} \n"
    ctest -S ./automated_test_script.cmake,${mode} -V >& ${PROJECT_NAME}_${BRANCH_NAME}_${mode}_log.txt 
    printf "Done running ctest for ${PROJECT_NAME} \n"

    # we have built the documentation, now do something with it
    # the loop allows us to specify multiple destinations for the same project
    if (-e documentation/${PROJECT_NAME}) then
      foreach document (`cat documentation/${PROJECT_NAME} | grep -v "#"`)
        set DOC_DEST=`printf "${document}" | cut -d "|" -f 1`
        set DOC_PATH=`printf "${document}" | cut -d "|" -f 2`
        set DOC_SRC=`printf "${document}" | cut -d "|" -f 3`

        if( "${DOC_DEST}" == "local" ) then
          if (! -e ${DOC_PATH}) then
            mkdir -p ${DOC_PATH}
          endif

          # the documentation can be a lot of files, exceeding the limit of glob
          # instead of a straight copy we do things one file at a time
          # still do a recursive copy of the directories, assuming they do not 
          # contain massive amounts of files
          set files = `ls ${PROJECT_BUILD_DIRECTORY}/${DOC_SRC}`
          foreach file (`echo ${files}`)
            # this is recursive in case the file is a directory
            cp -R ${PROJECT_BUILD_DIRECTORY}/${DOC_SRC}/$file ${DOC_PATH}/.
          end
        else if ( "${DOC_DEST}" == "git" ) then
          printf "Updating git documentation for ${PROJECT_NAME}\n"
          if (-e ${PROJECT_NAME}_${DOC_PATH}) then
            rm -Rf ${PROJECT_NAME}_${DOC_PATH}
          endif
          ${GITCOMMAND} clone -b ${DOC_PATH} ${PROJECT_ROOT} ${PROJECT_NAME}_${DOC_PATH}
          cd ${PROJECT_NAME}_${DOC_PATH}

          set files = `ls`
          foreach file (`echo ${files}`)
            # this is recursive in case the file is a directory
            rm -R $file
          end

          set files = `ls ${PROJECT_BUILD_DIRECTORY}/${DOC_SRC}`
          foreach file (`echo ${files}`)
            # this is recursive in case the file is a directory
            cp -R ${PROJECT_BUILD_DIRECTORY}/${DOC_SRC}/$file .
          ${GITCOMMAND} add $file
          end

          ${GITCOMMAND} commit -a -m "Automated documentation update" 
          ${GITCOMMAND} push origin ${DOC_PATH}
          cd ..
        else
          printf "Unknown document destination ${DOC_DEST} for project ${PROJECT_NAME}\n"
        endif
      end
    endif

    # unload project specific environment module
    if (-e modules/${PROJECT_NAME}) then
      module unload ${PROJECT_NAME}
    endif
  endif
end

#reset environment
setenv MODULEPATH $MODULEPATHSAV
# ========================================

