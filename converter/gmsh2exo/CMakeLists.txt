CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(gmsh2exo)

# Adding compiler flags to activate c++11 features
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
IF(COMPILER_SUPPORTS_CXX11)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ELSEIF(COMPILER_SUPPORTS_CXX0X)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSE()
  MESSAGE(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
ENDIF()

# Set up RPATH
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)


FIND_LIBRARY(GMSH_LIB Gmsh)
FIND_FILE(GMSH_HDR Gmsh.h)
GET_FILENAME_COMPONENT(GMSH_INCPATH ${GMSH_HDR} PATH)

FIND_LIBRARY(EXO_LIB exodus)
FIND_FILE(EXO_HDR exodusII.h)
GET_FILENAME_COMPONENT(EXO_INCPATH ${EXO_HDR} PATH)

# add include files to path
INCLUDE_DIRECTORIES(include)
INCLUDE_DIRECTORIES(AFTER ${GMSH_INCPATH})
INCLUDE_DIRECTORIES(AFTER ${EXO_INCPATH})

# setting compile and link flags 
SET(GEX_SRCS src/gmsh2exo.C)
SET(ALL_SRCS ${GEX_SRCS})
SET_SOURCE_FILES_PROPERTIES(${ALL_SRCS} PROPERTIES COMPILE_FLAGS "-fPIC")

ADD_EXECUTABLE(gmsh2exo ${GEX_SRCS})
TARGET_LINK_LIBRARIES(gmsh2exo ${GMSH_LIB} ${EXO_LIB})
INSTALL(TARGETS gmsh2exo RUNTIME DESTINATION bin)
