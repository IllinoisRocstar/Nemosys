macro(NEM_get_imported_location OUT_VAR LIB_NAME OUT_VAR_PATH)
  get_target_property(BUILD_TYPE ${LIB_NAME} IMPORTED_CONFIGURATIONS)
  if(WIN32)
    get_target_property(OUT_LIB ${LIB_NAME} IMPORTED_IMPLIB_${BUILD_TYPE})
  else()
    get_target_property(OUT_LIB ${LIB_NAME} IMPORTED_LOCATION_${BUILD_TYPE})
  endif()
  if(OUT_LIB)
    message(STATUS "${BUILD_TYPE}: ${OUT_LIB}")
    list(APPEND ${OUT_VAR} ${OUT_LIB})
    get_filename_component(LIBRARY_PATH ${OUT_LIB} PATH)
    list(APPEND ${OUT_VAR_PATH} ${LIBRARY_PATH})
  endif()
endmacro()

# For third party targets, add INTERFACE_INCLUDE_DIRECTORIES as to ${target_}_NOWARN_DIRS
# TODO: Should headers of transitive dependencies also be added as SYSTEM headers?
macro(NEM_link_3p_targets target_ scope_)
  if("${scope_}" STREQUAL "PRIVATE" OR "${scope_}" STREQUAL "PUBLIC")  # but not INTERFACE
    foreach(dep_target_ IN LISTS ARGN)
      get_target_property(dependency_include_dirs_ ${dep_target_} INTERFACE_INCLUDE_DIRECTORIES)
      if(dependency_include_dirs_)
        target_include_directories(${target_} SYSTEM PRIVATE ${dependency_include_dirs_})
      else()
        message(AUTHOR_WARNING "INTERFACE_INCLUDE_DIRECTORIES for ${dep_target_} not found")
      endif()
    endforeach()
  endif()
  target_link_libraries(${target_} ${scope_} ${ARGN})
endmacro()

# For directories, append include directories needed for compilation to ${target_}_NOWARN_DIRS
macro(NEM_include_3p_directories target_ scope_)
  if("${scope_}" STREQUAL "PRIVATE" OR "${scope_}" STREQUAL "PUBLIC")  # but not INTERFACE
    target_include_directories(${target_} SYSTEM PRIVATE ${ARGN})
  endif()
  target_include_directories(${target_} ${scope_} ${ARGN})
endmacro()

# Circular dependencies WILL cause infinite loop
function(recurse_interface_includes out_var target)
  get_target_property(includes_ ${target} INTERFACE_INCLUDE_DIRECTORIES)
  if(NOT includes_)
    set(includes_ "")
  endif()
  get_target_property(dependencies_ ${target} INTERFACE_LINK_LIBRARIES)
  if(dependencies_)
    foreach(dependency_ IN LISTS dependencies_)
      if(TARGET ${dependency_})
        recurse_interface_includes(${dependency_}_includes_ ${dependency_} ${dependency_}_processed_ ${processed_libs_})
        list(APPEND includes_ ${${dependency_}_includes_})
      elseif(${dependency_} MATCHES "::")
        # Issue with targets from find_package (because created via find_package(... IMPORTED) without GLOBAL)
        message(AUTHOR_WARNING "${dependency_} is probably a target, but not detected as such")
      endif()
    endforeach()
  endif()
  set(${out_var} ${includes_} PARENT_SCOPE)
endfunction()
