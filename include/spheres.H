/*********************************************************************/
/* This is a source file for a utility that reads a mesoscale pack   */
/* microstructure output file as generated by RocPack and populates  */
/* the file with field values for a given scalar in OpenFoam's       */
/* setFields dictionary format at cells that belong to spheres       */
/* in the pack. The input file must be in gmsh's .geo format 				 */
/* Compilation: g++ -std=c++11 -o sphere_map sphere_map.cpp          */
/* Useage: ./sphere_map <pack_file> <out_file>                       */
/*********************************************************************/

#ifndef spheres_H
#define spheres_H

#include <iostream>
#include <fstream>
#include <ostream>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <cstring>
#include <sstream>
#include <vector>

using std::cout; using std::endl;
using std::ofstream; using std::string;
using std::istream; using std::ostream;
using std::ifstream; using std::vector;
using std::size_t; using std::stringstream;

class sphere {
public:
	// constructors
	sphere(){}	
	sphere(double x_, double y_, double z_, double r_)
	:	x(x_), y(y_), z(z_), r(r_) {}
	~sphere(){}
	// access		
	double X() const { return x; }
	double Y() const { return y; }
	double Z() const { return z; }
	double R() const { return r; }

	// member
	bool in_sphere(std::vector<double> point);		

private:
	double x;
	double y;
	double z;
	double r;
};
// read spheres from istream
vector<sphere> readSpheres(std::istream& inputStream);
// read spheres from file
vector<sphere> readSpheres(std::string filename);
// write spheres to outupt stream
void writeSpheres(const std::vector<sphere> s, ostream& outputStream);
#endif
